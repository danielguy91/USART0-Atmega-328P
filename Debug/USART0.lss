
USART0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000112  00800100  00800100  00000634  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000664  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ce  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071e  00000000  00000000  000010d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000570  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00001d60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046b  00000000  00000000  00001e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c0  00000000  00000000  0000229f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000235f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 bb 02 	jmp	0x576	; 0x576 <__vector_11>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__vector_18>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  68:	aa 00       	.word	0x00aa	; ????
  6a:	ca 00       	.word	0x00ca	; ????
  6c:	ed 00       	.word	0x00ed	; ????
  6e:	10 01       	movw	r2, r0
  70:	33 01       	movw	r6, r6
  72:	60 01       	movw	r12, r0
  74:	82 01       	movw	r16, r4
  76:	a5 01       	movw	r20, r10
  78:	d2 01       	movw	r26, r4

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_clear_bss>:
  86:	22 e0       	ldi	r18, 0x02	; 2
  88:	a0 e0       	ldi	r26, 0x00	; 0
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a2 31       	cpi	r26, 0x12	; 18
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 13 02 	call	0x426	; 0x426 <main>
  9a:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <InitUSART>:
}

void USART_Transmit( unsigned char data )
{
	while ( !( UCSR0A & (1<<UDRE0)) );                          // Esperar a que el búfer de transmisión esté vacío  UDRE0 cuando tenga el valor de 1 esta listo para ser usado 
    UDR0 = data; 
  a2:	e2 ec       	ldi	r30, 0xC2	; 194
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	90 81       	ld	r25, Z
  a8:	9f 7b       	andi	r25, 0xBF	; 191
  aa:	90 83       	st	Z, r25
  ac:	90 81       	ld	r25, Z
  ae:	9f 77       	andi	r25, 0x7F	; 127
  b0:	90 83       	st	Z, r25
  b2:	90 81       	ld	r25, Z
  b4:	9f 7e       	andi	r25, 0xEF	; 239
  b6:	90 83       	st	Z, r25
  b8:	90 81       	ld	r25, Z
  ba:	9f 7d       	andi	r25, 0xDF	; 223
  bc:	90 83       	st	Z, r25
  be:	90 81       	ld	r25, Z
  c0:	97 7f       	andi	r25, 0xF7	; 247
  c2:	90 83       	st	Z, r25
  c4:	90 81       	ld	r25, Z
  c6:	92 60       	ori	r25, 0x02	; 2
  c8:	90 83       	st	Z, r25
  ca:	90 81       	ld	r25, Z
  cc:	94 60       	ori	r25, 0x04	; 4
  ce:	90 83       	st	Z, r25
  d0:	e1 ec       	ldi	r30, 0xC1	; 193
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	90 81       	ld	r25, Z
  d6:	9b 7f       	andi	r25, 0xFB	; 251
  d8:	90 83       	st	Z, r25
  da:	a0 ec       	ldi	r26, 0xC0	; 192
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	9c 91       	ld	r25, X
  e0:	9d 7f       	andi	r25, 0xFD	; 253
  e2:	9c 93       	st	X, r25
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ee:	80 81       	ld	r24, Z
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	80 83       	st	Z, r24
  f4:	80 81       	ld	r24, Z
  f6:	80 61       	ori	r24, 0x10	; 16
  f8:	80 83       	st	Z, r24
  fa:	80 81       	ld	r24, Z
  fc:	80 68       	ori	r24, 0x80	; 128
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret

00000102 <initPort>:
	//indexRead++;                                               // Pone los datos en el buffer, envía los datos UDR0 buffer de datos
}

void initPort () {
   DDRB |= (1<< DDB5);                              // Configuro como salida el puerto DDB5   
 102:	84 b1       	in	r24, 0x04	; 4
 104:	80 62       	ori	r24, 0x20	; 32
 106:	84 b9       	out	0x04, r24	; 4
   PORTB &= ~(1 << PORTB5);                          // El puerto esta en 0
 108:	85 b1       	in	r24, 0x05	; 5
 10a:	8f 7d       	andi	r24, 0xDF	; 223
 10c:	85 b9       	out	0x05, r24	; 5
    
   DDRB |= (1<< DDB0); 
 10e:	84 b1       	in	r24, 0x04	; 4
 110:	81 60       	ori	r24, 0x01	; 1
 112:	84 b9       	out	0x04, r24	; 4
 114:	08 95       	ret

00000116 <initTimers10ms>:
    
}

void  initTimers10ms () {
	OCR1A =625 ;                                      // Valor de compracion
 116:	81 e7       	ldi	r24, 0x71	; 113
 118:	92 e0       	ldi	r25, 0x02	; 2
 11a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 11e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCNT1 = 0x00 ;                                    // temporizador inicializo
 122:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 126:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIMSK1 = ( 1 << OCIE1A);                          // interrupción de compracion en modo CTC OCR1A = TCNT1
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCCR1B = ( 1 << WGM12) | ( 1 << CS12) ;           // PRESCALAR EN 256 y MODO CTC
 130:	8c e0       	ldi	r24, 0x0C	; 12
 132:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 136:	08 95       	ret

00000138 <DecodeHeader>:
}

void DecodeHeader()
{
		
	while((indexRead!=indexWrite)&&(status==1)) {
 138:	53 c1       	rjmp	.+678    	; 0x3e0 <DecodeHeader+0x2a8>
		
		switch(header) {
 13a:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <header>
 13e:	0e 2e       	mov	r0, r30
 140:	00 0c       	add	r0, r0
 142:	ff 0b       	sbc	r31, r31
 144:	e9 30       	cpi	r30, 0x09	; 9
 146:	f1 05       	cpc	r31, r1
 148:	08 f0       	brcs	.+2      	; 0x14c <DecodeHeader+0x14>
 14a:	4a c1       	rjmp	.+660    	; 0x3e0 <DecodeHeader+0x2a8>
 14c:	ec 5c       	subi	r30, 0xCC	; 204
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__tablejump2__>
			case 0://U
			
			    if(buffer[indexRead]=='U') {
 154:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <indexRead>
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	e9 5f       	subi	r30, 0xF9	; 249
 15c:	fe 4f       	sbci	r31, 0xFE	; 254
 15e:	80 81       	ld	r24, Z
 160:	85 35       	cpi	r24, 0x55	; 85
 162:	69 f4       	brne	.+26     	; 0x17e <DecodeHeader+0x46>
				cks='U';
 164:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <cks>
				header++;
 168:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <header>
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <header>
				indexRead++;                         
 172:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <indexRead>
 176:	8f 5f       	subi	r24, 0xFF	; 255
 178:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <indexRead>
 17c:	31 c1       	rjmp	.+610    	; 0x3e0 <DecodeHeader+0x2a8>
									 
										   }
			else {
				indexRead--;
 17e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <indexRead>
 182:	81 50       	subi	r24, 0x01	; 1
 184:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <indexRead>
				header--;
 188:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <header>
 18c:	81 50       	subi	r24, 0x01	; 1
 18e:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <header>
 192:	26 c1       	rjmp	.+588    	; 0x3e0 <DecodeHeader+0x2a8>
			}
			break;
			case 1://UN
			if(buffer[indexRead]=='N') {
 194:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <indexRead>
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	e9 5f       	subi	r30, 0xF9	; 249
 19c:	fe 4f       	sbci	r31, 0xFE	; 254
 19e:	80 81       	ld	r24, Z
 1a0:	8e 34       	cpi	r24, 0x4E	; 78
 1a2:	81 f4       	brne	.+32     	; 0x1c4 <DecodeHeader+0x8c>
				cks^='N';
 1a4:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <cks>
 1a8:	89 27       	eor	r24, r25
 1aa:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <cks>
				header++;
 1ae:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <header>
 1b2:	8f 5f       	subi	r24, 0xFF	; 255
 1b4:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <header>
				indexRead++;
 1b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <indexRead>
 1bc:	8f 5f       	subi	r24, 0xFF	; 255
 1be:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <indexRead>
 1c2:	0e c1       	rjmp	.+540    	; 0x3e0 <DecodeHeader+0x2a8>
			}
			else {
				indexRead--;
 1c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <indexRead>
 1c8:	81 50       	subi	r24, 0x01	; 1
 1ca:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <indexRead>
				header--;
 1ce:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <header>
 1d2:	81 50       	subi	r24, 0x01	; 1
 1d4:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <header>
 1d8:	03 c1       	rjmp	.+518    	; 0x3e0 <DecodeHeader+0x2a8>
			}
			break;
			case 2://UNE
			if(buffer[indexRead]=='E') {
 1da:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <indexRead>
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	e9 5f       	subi	r30, 0xF9	; 249
 1e2:	fe 4f       	sbci	r31, 0xFE	; 254
 1e4:	80 81       	ld	r24, Z
 1e6:	85 34       	cpi	r24, 0x45	; 69
 1e8:	81 f4       	brne	.+32     	; 0x20a <DecodeHeader+0xd2>
				cks^='E';
 1ea:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <cks>
 1ee:	89 27       	eor	r24, r25
 1f0:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <cks>
				header++;
 1f4:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <header>
 1f8:	8f 5f       	subi	r24, 0xFF	; 255
 1fa:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <header>
				indexRead++;
 1fe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <indexRead>
 202:	8f 5f       	subi	r24, 0xFF	; 255
 204:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <indexRead>
 208:	eb c0       	rjmp	.+470    	; 0x3e0 <DecodeHeader+0x2a8>
			}
			else {
				indexRead--;
 20a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <indexRead>
 20e:	81 50       	subi	r24, 0x01	; 1
 210:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <indexRead>
				header--;
 214:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <header>
 218:	81 50       	subi	r24, 0x01	; 1
 21a:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <header>
 21e:	e0 c0       	rjmp	.+448    	; 0x3e0 <DecodeHeader+0x2a8>
			}
			break;
			case 3://UNER
			    if(buffer[indexRead]=='R') {
 220:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <indexRead>
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	e9 5f       	subi	r30, 0xF9	; 249
 228:	fe 4f       	sbci	r31, 0xFE	; 254
 22a:	80 81       	ld	r24, Z
 22c:	82 35       	cpi	r24, 0x52	; 82
 22e:	81 f4       	brne	.+32     	; 0x250 <DecodeHeader+0x118>
				cks^='R';
 230:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <cks>
 234:	89 27       	eor	r24, r25
 236:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <cks>
				header++;
 23a:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <header>
 23e:	8f 5f       	subi	r24, 0xFF	; 255
 240:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <header>
				indexRead++;
 244:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <indexRead>
 248:	8f 5f       	subi	r24, 0xFF	; 255
 24a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <indexRead>
 24e:	c8 c0       	rjmp	.+400    	; 0x3e0 <DecodeHeader+0x2a8>
				
			                               }
			    else {
				 indexRead--;
 250:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <indexRead>
 254:	81 50       	subi	r24, 0x01	; 1
 256:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <indexRead>
				 header--;
 25a:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <header>
 25e:	81 50       	subi	r24, 0x01	; 1
 260:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <header>
 264:	bd c0       	rjmp	.+378    	; 0x3e0 <DecodeHeader+0x2a8>
			          }
			    break;
			 case 4: 
					if(buffer[indexRead] > 0x00) {
 266:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <indexRead>
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	e9 5f       	subi	r30, 0xF9	; 249
 26e:	fe 4f       	sbci	r31, 0xFE	; 254
 270:	80 81       	ld	r24, Z
 272:	88 23       	and	r24, r24
 274:	d1 f0       	breq	.+52     	; 0x2aa <DecodeHeader+0x172>
					    nBytes = buffer[indexRead];
 276:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <indexRead>
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	e9 5f       	subi	r30, 0xF9	; 249
 27e:	fe 4f       	sbci	r31, 0xFE	; 254
 280:	80 81       	ld	r24, Z
 282:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <nBytes>
						cks^= nBytes;
 286:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <nBytes>
 28a:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <cks>
 28e:	89 27       	eor	r24, r25
 290:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <cks>
						header++;
 294:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <header>
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <header>
						indexRead++;
 29e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <indexRead>
 2a2:	8f 5f       	subi	r24, 0xFF	; 255
 2a4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <indexRead>
 2a8:	9b c0       	rjmp	.+310    	; 0x3e0 <DecodeHeader+0x2a8>
						
					}
					else {
						indexRead--;
 2aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <indexRead>
 2ae:	81 50       	subi	r24, 0x01	; 1
 2b0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <indexRead>
						header--;
 2b4:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <header>
 2b8:	81 50       	subi	r24, 0x01	; 1
 2ba:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <header>
 2be:	90 c0       	rjmp	.+288    	; 0x3e0 <DecodeHeader+0x2a8>
					}
					break;
			 case 5:
			 if(buffer[indexRead]==0x00) {
 2c0:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <indexRead>
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	e9 5f       	subi	r30, 0xF9	; 249
 2c8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ca:	80 81       	ld	r24, Z
 2cc:	81 11       	cpse	r24, r1
 2ce:	0f c0       	rjmp	.+30     	; 0x2ee <DecodeHeader+0x1b6>
				cks^= 0x00;
 2d0:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <cks>
 2d4:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <cks>
				 header++;
 2d8:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <header>
 2dc:	8f 5f       	subi	r24, 0xFF	; 255
 2de:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <header>
				 indexRead++;
 2e2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <indexRead>
 2e6:	8f 5f       	subi	r24, 0xFF	; 255
 2e8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <indexRead>
 2ec:	79 c0       	rjmp	.+242    	; 0x3e0 <DecodeHeader+0x2a8>
				 
			 }
			 else {
				 indexRead--;
 2ee:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <indexRead>
 2f2:	81 50       	subi	r24, 0x01	; 1
 2f4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <indexRead>
				 header--;
 2f8:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <header>
 2fc:	81 50       	subi	r24, 0x01	; 1
 2fe:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <header>
 302:	6e c0       	rjmp	.+220    	; 0x3e0 <DecodeHeader+0x2a8>
			 }
			 break;
			  case 6:
			  if(buffer[indexRead]==':') {
 304:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <indexRead>
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	e9 5f       	subi	r30, 0xF9	; 249
 30c:	fe 4f       	sbci	r31, 0xFE	; 254
 30e:	80 81       	ld	r24, Z
 310:	8a 33       	cpi	r24, 0x3A	; 58
 312:	81 f4       	brne	.+32     	; 0x334 <DecodeHeader+0x1fc>
				  cks^= ':';
 314:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <cks>
 318:	89 27       	eor	r24, r25
 31a:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <cks>
				  header++;
 31e:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <header>
 322:	8f 5f       	subi	r24, 0xFF	; 255
 324:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <header>
				  indexRead++;
 328:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <indexRead>
 32c:	8f 5f       	subi	r24, 0xFF	; 255
 32e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <indexRead>
 332:	56 c0       	rjmp	.+172    	; 0x3e0 <DecodeHeader+0x2a8>
				  
			  }
			  else {
				  indexRead--;
 334:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <indexRead>
 338:	81 50       	subi	r24, 0x01	; 1
 33a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <indexRead>
				  header--;
 33e:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <header>
 342:	81 50       	subi	r24, 0x01	; 1
 344:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <header>
 348:	4b c0       	rjmp	.+150    	; 0x3e0 <DecodeHeader+0x2a8>
			  }
			  break;
			   case 7:
			   if(buffer[indexRead] != 0x00) {
 34a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <indexRead>
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	e9 5f       	subi	r30, 0xF9	; 249
 352:	fe 4f       	sbci	r31, 0xFE	; 254
 354:	80 81       	ld	r24, Z
 356:	88 23       	and	r24, r24
 358:	d1 f0       	breq	.+52     	; 0x38e <DecodeHeader+0x256>
				   cks^= buffer[indexRead] ;
 35a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <indexRead>
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	e9 5f       	subi	r30, 0xF9	; 249
 362:	fe 4f       	sbci	r31, 0xFE	; 254
 364:	90 81       	ld	r25, Z
 366:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <cks>
 36a:	89 27       	eor	r24, r25
 36c:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <cks>
				   cmdPos_inBuff=indexRead;
 370:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <indexRead>
 374:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				   header++;
 378:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <header>
 37c:	8f 5f       	subi	r24, 0xFF	; 255
 37e:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <header>
				   indexRead++;
 382:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <indexRead>
 386:	8f 5f       	subi	r24, 0xFF	; 255
 388:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <indexRead>
 38c:	29 c0       	rjmp	.+82     	; 0x3e0 <DecodeHeader+0x2a8>
				   
			   }
			   else {
				   indexRead--;
 38e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <indexRead>
 392:	81 50       	subi	r24, 0x01	; 1
 394:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <indexRead>
				   header--;
 398:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <header>
 39c:	81 50       	subi	r24, 0x01	; 1
 39e:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <header>
 3a2:	1e c0       	rjmp	.+60     	; 0x3e0 <DecodeHeader+0x2a8>
			   }
			   break;		
			case 8:                                //cks
				if(cks == buffer[indexRead]) {
 3a4:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <indexRead>
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	e9 5f       	subi	r30, 0xF9	; 249
 3ac:	fe 4f       	sbci	r31, 0xFE	; 254
 3ae:	90 81       	ld	r25, Z
 3b0:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <cks>
 3b4:	98 13       	cpse	r25, r24
 3b6:	0a c0       	rjmp	.+20     	; 0x3cc <DecodeHeader+0x294>
					
					 status=2;					 
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <status>
				     indexRead=indexWrite;
 3be:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <indexWrite>
 3c2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <indexRead>
					 header=0;
 3c6:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <header>
 3ca:	0a c0       	rjmp	.+20     	; 0x3e0 <DecodeHeader+0x2a8>
				
				}
				else {
					indexRead--;
 3cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <indexRead>
 3d0:	81 50       	subi	r24, 0x01	; 1
 3d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <indexRead>
					header--;
 3d6:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <header>
 3da:	81 50       	subi	r24, 0x01	; 1
 3dc:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <header>
}

void DecodeHeader()
{
		
	while((indexRead!=indexWrite)&&(status==1)) {
 3e0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <indexRead>
 3e4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <indexWrite>
 3e8:	98 17       	cp	r25, r24
 3ea:	29 f0       	breq	.+10     	; 0x3f6 <DecodeHeader+0x2be>
 3ec:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <status>
 3f0:	81 30       	cpi	r24, 0x01	; 1
 3f2:	09 f4       	brne	.+2      	; 0x3f6 <DecodeHeader+0x2be>
 3f4:	a2 ce       	rjmp	.-700    	; 0x13a <DecodeHeader+0x2>
 3f6:	08 95       	ret

000003f8 <CMD>:
	//}
//}

void CMD()  {                                                                   // Lectura de codigos
	
	switch(buffer[cmdPos_inBuff]) {
 3f8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	e9 5f       	subi	r30, 0xF9	; 249
 400:	fe 4f       	sbci	r31, 0xFE	; 254
 402:	80 81       	ld	r24, Z
 404:	8b 32       	cpi	r24, 0x2B	; 43
 406:	19 f0       	breq	.+6      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 408:	8d 32       	cpi	r24, 0x2D	; 45
 40a:	39 f0       	breq	.+14     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 40c:	08 95       	ret
	    case '+':
		    
            INCREMENTAR=1;     
 40e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag1>
 412:	81 60       	ori	r24, 0x01	; 1
 414:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flag1>
		
		break;
 418:	08 95       	ret
		
		case '-':
			DECREMENTAR=1;
 41a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag1>
 41e:	82 60       	ori	r24, 0x02	; 2
 420:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flag1>
 424:	08 95       	ret

00000426 <main>:
	}
}


int main (void) {
	 DECREMENTAR=0;
 426:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag1>
 42a:	8d 7f       	andi	r24, 0xFD	; 253
 42c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flag1>
	 INCREMENTAR=0;                                    // 1 segundo apagado y 1 segundo prendido 
 430:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag1>
 434:	8e 7f       	andi	r24, 0xFE	; 254
 436:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flag1>
	InitUSART(MYUBRR);   
 43a:	87 e6       	ldi	r24, 0x67	; 103
 43c:	0e 94 51 00 	call	0xa2	; 0xa2 <InitUSART>
	initPort ();
 440:	0e 94 81 00 	call	0x102	; 0x102 <initPort>
    initTimers10ms ();	
 444:	0e 94 8b 00 	call	0x116	; 0x116 <initTimers10ms>
	 sei();
 448:	78 94       	sei
     timeInitms= 0;                    // tiempo inicio en 50 ms  (5*10)= 50 ms 
 44a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <timeInitms+0x1>
 44e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <timeInitms>
	 indexWrite=0;
 452:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <indexWrite>
	 indexRead=0;
 456:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <indexRead>
	 header=0;
 45a:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <header>
	 status=1;
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <status>
	 timeFinms=0;
 464:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <timeFinms+0x1>
 468:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <timeFinms>
	 sendData=0;
 46c:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <sendData>
	
	while(1){
		
      if((indexRead!=indexWrite) && INCREMENTAR==0 && DECREMENTAR ==0){
 470:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <indexRead>
 474:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <indexWrite>
 478:	98 17       	cp	r25, r24
 47a:	a1 f0       	breq	.+40     	; 0x4a4 <main+0x7e>
 47c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag1>
 480:	80 fd       	sbrc	r24, 0
 482:	10 c0       	rjmp	.+32     	; 0x4a4 <main+0x7e>
 484:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag1>
 488:	81 fd       	sbrc	r24, 1
 48a:	0c c0       	rjmp	.+24     	; 0x4a4 <main+0x7e>
	      switch(status) {
 48c:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <status>
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	19 f0       	breq	.+6      	; 0x49a <main+0x74>
 494:	82 30       	cpi	r24, 0x02	; 2
 496:	21 f0       	breq	.+8      	; 0x4a0 <main+0x7a>
 498:	05 c0       	rjmp	.+10     	; 0x4a4 <main+0x7e>
		    case 1:
		         DecodeHeader();
 49a:	0e 94 9c 00 	call	0x138	; 0x138 <DecodeHeader>
		         
			  break;
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <main+0x7e>
		       
			case 2:
			   
		         CMD();
 4a0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <CMD>
		  
		     break;
	                       }

	                            }
		if (INCREMENTAR==1)
 4a4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag1>
 4a8:	80 ff       	sbrs	r24, 0
 4aa:	11 c0       	rjmp	.+34     	; 0x4ce <main+0xa8>
		{
			 timeInitms +=10;
 4ac:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timeInitms>
 4b0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <timeInitms+0x1>
 4b4:	0a 96       	adiw	r24, 0x0a	; 10
 4b6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <timeInitms+0x1>
 4ba:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <timeInitms>
	         status=1;	
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <status>
			INCREMENTAR = 0;
 4c4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag1>
 4c8:	8e 7f       	andi	r24, 0xFE	; 254
 4ca:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flag1>
		
			}
		if (DECREMENTAR==1)
 4ce:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag1>
 4d2:	81 ff       	sbrs	r24, 1
 4d4:	1a c0       	rjmp	.+52     	; 0x50a <main+0xe4>
		{
		     timeInitms -=10;
 4d6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timeInitms>
 4da:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <timeInitms+0x1>
 4de:	0a 97       	sbiw	r24, 0x0a	; 10
 4e0:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <timeInitms+0x1>
 4e4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <timeInitms>
					if (PORTB & (1<<PORTB0)){
 4e8:	28 9b       	sbis	0x05, 0	; 5
 4ea:	04 c0       	rjmp	.+8      	; 0x4f4 <main+0xce>
						PORTB &= ~(1<<PORTB0);
 4ec:	85 b1       	in	r24, 0x05	; 5
 4ee:	8e 7f       	andi	r24, 0xFE	; 254
 4f0:	85 b9       	out	0x05, r24	; 5
 4f2:	03 c0       	rjmp	.+6      	; 0x4fa <main+0xd4>
					}
					else {
						PORTB |= (1<< PORTB0);
 4f4:	85 b1       	in	r24, 0x05	; 5
 4f6:	81 60       	ori	r24, 0x01	; 1
 4f8:	85 b9       	out	0x05, r24	; 5
						
					}
					status=1;
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <status>
					DECREMENTAR = 0;
 500:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag1>
 504:	8d 7f       	andi	r24, 0xFD	; 253
 506:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flag1>
					
				}
			if (!timeFinms){
 50a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <timeFinms>
 50e:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <timeFinms+0x1>
 512:	89 2b       	or	r24, r25
 514:	09 f0       	breq	.+2      	; 0x518 <main+0xf2>
 516:	ac cf       	rjmp	.-168    	; 0x470 <main+0x4a>
				timeFinms = timeInitms;
 518:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timeInitms>
 51c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <timeInitms+0x1>
 520:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <timeFinms+0x1>
 524:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <timeFinms>
				//(1 << PORTB5 1) desplazado por B5 es igual a 00100000
				if(PORTB & (1 << PORTB5)) //desplazo al numero 1 cinco veces para que aparezca en la posicion 5
 528:	2d 9b       	sbis	0x05, 5	; 5
 52a:	04 c0       	rjmp	.+8      	; 0x534 <main+0x10e>
				PORTB &= ~(1 << PORTB5); //~ (1 << PORTB5) = 11011111 hago cero el bit 5 de PORTB5
 52c:	85 b1       	in	r24, 0x05	; 5
 52e:	8f 7d       	andi	r24, 0xDF	; 223
 530:	85 b9       	out	0x05, r24	; 5
 532:	9e cf       	rjmp	.-196    	; 0x470 <main+0x4a>
				else
				PORTB |= (1 << PORTB5);
 534:	85 b1       	in	r24, 0x05	; 5
 536:	80 62       	ori	r24, 0x20	; 32
 538:	85 b9       	out	0x05, r24	; 5
 53a:	9a cf       	rjmp	.-204    	; 0x470 <main+0x4a>

0000053c <__vector_18>:
			}				
		
}
}

ISR(USART_RX_vect){
 53c:	1f 92       	push	r1
 53e:	0f 92       	push	r0
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	0f 92       	push	r0
 544:	11 24       	eor	r1, r1
 546:	8f 93       	push	r24
 548:	ef 93       	push	r30
 54a:	ff 93       	push	r31
	   buffer[indexWrite] = UDR0;
 54c:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <indexWrite>
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 556:	e9 5f       	subi	r30, 0xF9	; 249
 558:	fe 4f       	sbci	r31, 0xFE	; 254
 55a:	80 83       	st	Z, r24
        indexWrite++;
 55c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <indexWrite>
 560:	8f 5f       	subi	r24, 0xFF	; 255
 562:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <indexWrite>
		}
 566:	ff 91       	pop	r31
 568:	ef 91       	pop	r30
 56a:	8f 91       	pop	r24
 56c:	0f 90       	pop	r0
 56e:	0f be       	out	0x3f, r0	; 63
 570:	0f 90       	pop	r0
 572:	1f 90       	pop	r1
 574:	18 95       	reti

00000576 <__vector_11>:
	

ISR (TIMER1_COMPA_vect) {
 576:	1f 92       	push	r1
 578:	0f 92       	push	r0
 57a:	0f b6       	in	r0, 0x3f	; 63
 57c:	0f 92       	push	r0
 57e:	11 24       	eor	r1, r1
 580:	8f 93       	push	r24
 582:	9f 93       	push	r25
        
	  if (timeFinms){
 584:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <timeFinms>
 588:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <timeFinms+0x1>
 58c:	89 2b       	or	r24, r25
 58e:	49 f0       	breq	.+18     	; 0x5a2 <__vector_11+0x2c>
		  timeFinms--;
 590:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <timeFinms>
 594:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <timeFinms+0x1>
 598:	01 97       	sbiw	r24, 0x01	; 1
 59a:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <timeFinms+0x1>
 59e:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <timeFinms>
	                 }
}
 5a2:	9f 91       	pop	r25
 5a4:	8f 91       	pop	r24
 5a6:	0f 90       	pop	r0
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	0f 90       	pop	r0
 5ac:	1f 90       	pop	r1
 5ae:	18 95       	reti

000005b0 <__tablejump2__>:
 5b0:	ee 0f       	add	r30, r30
 5b2:	ff 1f       	adc	r31, r31
 5b4:	05 90       	lpm	r0, Z+
 5b6:	f4 91       	lpm	r31, Z
 5b8:	e0 2d       	mov	r30, r0
 5ba:	09 94       	ijmp

000005bc <_exit>:
 5bc:	f8 94       	cli

000005be <__stop_program>:
 5be:	ff cf       	rjmp	.-2      	; 0x5be <__stop_program>
