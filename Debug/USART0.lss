
USART0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000058c  00000620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000058c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000112  00800102  00800102  00000622  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000622  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a2d  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000764  00000000  00000000  00001131  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053e  00000000  00000000  00001895  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b2  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014d  00000000  00000000  00002382  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000024cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_11>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__vector_18>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	98 00       	.word	0x0098	; ????
  6a:	b3 00       	.word	0x00b3	; ????
  6c:	d2 00       	.word	0x00d2	; ????
  6e:	f1 00       	.word	0x00f1	; ????
  70:	10 01       	movw	r2, r0
  72:	28 01       	movw	r4, r16
  74:	35 01       	movw	r6, r10

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	ec e8       	ldi	r30, 0x8C	; 140
  8a:	f5 e0       	ldi	r31, 0x05	; 5
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	22 e0       	ldi	r18, 0x02	; 2
  9a:	a2 e0       	ldi	r26, 0x02	; 2
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 31       	cpi	r26, 0x14	; 20
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 38 02 	call	0x470	; 0x470 <main>
  ac:	0c 94 c4 02 	jmp	0x588	; 0x588 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <InitUSART>:
	while ( !(UCSR0A & (1<<RXC0)) );                            // Esperar a recibir datos
	return UDR0;
	                                                // Obtener y devolver los datos recibidos del buffer 
}

void ConfPort (uint8_t  RDireccion,uint8_t  RPuerto,unsigned char PDireccion, unsigned char Direccion ,unsigned char PEstado, unsigned char Estado  ) {
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  be:	e2 ec       	ldi	r30, 0xC2	; 194
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	86 60       	ori	r24, 0x06	; 6
  c6:	80 83       	st	Z, r24
  c8:	e1 ec       	ldi	r30, 0xC1	; 193
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	88 e1       	ldi	r24, 0x18	; 24
  ce:	80 83       	st	Z, r24
  d0:	80 81       	ld	r24, Z
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <USART_Transmit>:
  d8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  dc:	95 ff       	sbrs	r25, 5
  de:	fc cf       	rjmp	.-8      	; 0xd8 <USART_Transmit>
  e0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  e4:	08 95       	ret

000000e6 <initTimers10ms>:
			  PEstado = Es bit del puerto a configurar
			  Estado =  Si esta configurado como encendido (1) o apagado (0)
*/     

void  initTimers10ms () {
	OCR1A =625 ;                                      // Valor de compracion
  e6:	81 e7       	ldi	r24, 0x71	; 113
  e8:	92 e0       	ldi	r25, 0x02	; 2
  ea:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  ee:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCNT1 = 0x00 ;                                    // temporizador inicializo
  f2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  f6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIMSK1 = ( 1 << OCIE1A);                          // interrupción de compracion en modo CTC OCR1A = TCNT1
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCCR1B = ( 1 << WGM12) | ( 1 << CS12) ;           // PRESCALAR EN 256 y MODO CTC
 100:	8c e0       	ldi	r24, 0x0C	; 12
 102:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 106:	08 95       	ret

00000108 <DecodeHeader>:
}

void DecodeHeader()
{
 108:	cf 93       	push	r28
	uint8_t aux;
	aux=indexWrite;
 10a:	c0 91 0f 02 	lds	r28, 0x020F	; 0x80020f <indexWrite>
	
	while((indexRead!=aux)&&(status==1)) {
 10e:	de c0       	rjmp	.+444    	; 0x2cc <DecodeHeader+0x1c4>
		switch(header) {
 110:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <header>
 114:	8e 2f       	mov	r24, r30
 116:	ee 0f       	add	r30, r30
 118:	99 0b       	sbc	r25, r25
 11a:	aa 0b       	sbc	r26, r26
 11c:	bb 0b       	sbc	r27, r27
 11e:	87 30       	cpi	r24, 0x07	; 7
 120:	91 05       	cpc	r25, r1
 122:	08 f0       	brcs	.+2      	; 0x126 <DecodeHeader+0x1e>
 124:	c9 c0       	rjmp	.+402    	; 0x2b8 <DecodeHeader+0x1b0>
 126:	fc 01       	movw	r30, r24
 128:	ec 5c       	subi	r30, 0xCC	; 204
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	0c 94 be 02 	jmp	0x57c	; 0x57c <__tablejump2__>
			case 0://U
			if(buffer[indexRead]=='U') {
 130:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indexRead>
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	e7 5f       	subi	r30, 0xF7	; 247
 138:	fe 4f       	sbci	r31, 0xFE	; 254
 13a:	80 81       	ld	r24, Z
 13c:	85 35       	cpi	r24, 0x55	; 85
 13e:	59 f4       	brne	.+22     	; 0x156 <DecodeHeader+0x4e>
				cks='U';
 140:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <cks>
				USART_Transmit( buffer[indexRead] );
 144:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indexRead>
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	e7 5f       	subi	r30, 0xF7	; 247
 14c:	fe 4f       	sbci	r31, 0xFE	; 254
 14e:	80 81       	ld	r24, Z
 150:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_Transmit>
 154:	b1 c0       	rjmp	.+354    	; 0x2b8 <DecodeHeader+0x1b0>
			}
			else {
				indexRead=indexWrite;
 156:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <indexWrite>
 15a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <indexRead>
				header=-1;
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <header>
 164:	a9 c0       	rjmp	.+338    	; 0x2b8 <DecodeHeader+0x1b0>
			}
			break;
			case 1://UN
			if(buffer[indexRead]=='N') {
 166:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indexRead>
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	e7 5f       	subi	r30, 0xF7	; 247
 16e:	fe 4f       	sbci	r31, 0xFE	; 254
 170:	80 81       	ld	r24, Z
 172:	8e 34       	cpi	r24, 0x4E	; 78
 174:	71 f4       	brne	.+28     	; 0x192 <DecodeHeader+0x8a>
				cks^='N';
 176:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <cks>
 17a:	89 27       	eor	r24, r25
 17c:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <cks>
				USART_Transmit( buffer[indexRead]);
 180:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indexRead>
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	e7 5f       	subi	r30, 0xF7	; 247
 188:	fe 4f       	sbci	r31, 0xFE	; 254
 18a:	80 81       	ld	r24, Z
 18c:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_Transmit>
 190:	93 c0       	rjmp	.+294    	; 0x2b8 <DecodeHeader+0x1b0>
			}
			else {
				indexRead--;
 192:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <indexRead>
 196:	81 50       	subi	r24, 0x01	; 1
 198:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <indexRead>
				header=-1;
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <header>
 1a2:	8a c0       	rjmp	.+276    	; 0x2b8 <DecodeHeader+0x1b0>
			}
			break;
			case 2://UNE
			if(buffer[indexRead]=='E') {
 1a4:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indexRead>
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	e7 5f       	subi	r30, 0xF7	; 247
 1ac:	fe 4f       	sbci	r31, 0xFE	; 254
 1ae:	80 81       	ld	r24, Z
 1b0:	85 34       	cpi	r24, 0x45	; 69
 1b2:	71 f4       	brne	.+28     	; 0x1d0 <DecodeHeader+0xc8>
				cks^='E';
 1b4:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <cks>
 1b8:	89 27       	eor	r24, r25
 1ba:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <cks>
	        USART_Transmit( buffer[indexRead]);
 1be:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indexRead>
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	e7 5f       	subi	r30, 0xF7	; 247
 1c6:	fe 4f       	sbci	r31, 0xFE	; 254
 1c8:	80 81       	ld	r24, Z
 1ca:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_Transmit>
 1ce:	74 c0       	rjmp	.+232    	; 0x2b8 <DecodeHeader+0x1b0>
			}
			else {
				indexRead--;
 1d0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <indexRead>
 1d4:	81 50       	subi	r24, 0x01	; 1
 1d6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <indexRead>
				header=-1;
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <header>
 1e0:	6b c0       	rjmp	.+214    	; 0x2b8 <DecodeHeader+0x1b0>
			}
			break;
			case 3://UNER
			if(buffer[indexRead]=='R') {
 1e2:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indexRead>
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	e7 5f       	subi	r30, 0xF7	; 247
 1ea:	fe 4f       	sbci	r31, 0xFE	; 254
 1ec:	80 81       	ld	r24, Z
 1ee:	82 35       	cpi	r24, 0x52	; 82
 1f0:	71 f4       	brne	.+28     	; 0x20e <DecodeHeader+0x106>
				cks^='R';
 1f2:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <cks>
 1f6:	89 27       	eor	r24, r25
 1f8:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <cks>
			    USART_Transmit( buffer[indexRead]);
 1fc:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indexRead>
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	e7 5f       	subi	r30, 0xF7	; 247
 204:	fe 4f       	sbci	r31, 0xFE	; 254
 206:	80 81       	ld	r24, Z
 208:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_Transmit>
 20c:	55 c0       	rjmp	.+170    	; 0x2b8 <DecodeHeader+0x1b0>
			}
			else {
				indexRead--;
 20e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <indexRead>
 212:	81 50       	subi	r24, 0x01	; 1
 214:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <indexRead>
				header=-1;
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <header>
 21e:	4c c0       	rjmp	.+152    	; 0x2b8 <DecodeHeader+0x1b0>
			break;

			case 4:                                         //byte menos significativo
			//if(buffer[indexRead]> 0x00) {
	            //proxBytes.v[0]=buffer[indexRead];
				nBytes=buffer[indexRead];
 220:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indexRead>
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	e7 5f       	subi	r30, 0xF7	; 247
 228:	fe 4f       	sbci	r31, 0xFE	; 254
 22a:	80 81       	ld	r24, Z
 22c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <nBytes>
				cks^=nBytes;
 230:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <nBytes>
 234:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <cks>
 238:	89 27       	eor	r24, r25
 23a:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <cks>
				USART_Transmit( buffer[indexRead]);
 23e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indexRead>
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	e7 5f       	subi	r30, 0xF7	; 247
 246:	fe 4f       	sbci	r31, 0xFE	; 254
 248:	80 81       	ld	r24, Z
 24a:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_Transmit>
			//}
			//else { 
				//indexRead--;
				//header=-1;
			//}
			break;
 24e:	34 c0       	rjmp	.+104    	; 0x2b8 <DecodeHeader+0x1b0>
			
			case 5 :                                           //byte mas significativo
			//if(buffer[indexRead]==0x00) {
				//proxBytes.v[1]=buffer[indexRead];
				cks^=0X00;
 250:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <cks>
 254:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <cks>
				USART_Transmit( buffer[indexRead]);
 258:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indexRead>
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	e7 5f       	subi	r30, 0xF7	; 247
 260:	fe 4f       	sbci	r31, 0xFE	; 254
 262:	80 81       	ld	r24, Z
 264:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_Transmit>
				//USART_Transmit(indexRead);
				//indexRead--;
				//header=-1;
				//PORTB|= (1<<PORTB7);
			//}
			break;
 268:	27 c0       	rjmp	.+78     	; 0x2b8 <DecodeHeader+0x1b0>

			case 6: // ':'
			if(buffer[indexRead]==':') {
 26a:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indexRead>
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	e7 5f       	subi	r30, 0xF7	; 247
 272:	fe 4f       	sbci	r31, 0xFE	; 254
 274:	80 81       	ld	r24, Z
 276:	8a 33       	cpi	r24, 0x3A	; 58
 278:	b9 f4       	brne	.+46     	; 0x2a8 <DecodeHeader+0x1a0>
				cks^=buffer[indexRead];
 27a:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indexRead>
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	e7 5f       	subi	r30, 0xF7	; 247
 282:	fe 4f       	sbci	r31, 0xFE	; 254
 284:	90 81       	ld	r25, Z
 286:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <cks>
 28a:	89 27       	eor	r24, r25
 28c:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <cks>
				status=2;//llego toda la cabecera
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <status>
				USART_Transmit( buffer[indexRead]);
 296:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indexRead>
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	e7 5f       	subi	r30, 0xF7	; 247
 29e:	fe 4f       	sbci	r31, 0xFE	; 254
 2a0:	80 81       	ld	r24, Z
 2a2:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_Transmit>
 2a6:	08 c0       	rjmp	.+16     	; 0x2b8 <DecodeHeader+0x1b0>
			}
			else {
				indexRead--;
 2a8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <indexRead>
 2ac:	81 50       	subi	r24, 0x01	; 1
 2ae:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <indexRead>
				header=-1;
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
 2b4:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <header>
			}
			break;
		}
		header++;
 2b8:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <header>
 2bc:	8f 5f       	subi	r24, 0xFF	; 255
 2be:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <header>
		indexRead++;
 2c2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <indexRead>
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
 2c8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <indexRead>
void DecodeHeader()
{
	uint8_t aux;
	aux=indexWrite;
	
	while((indexRead!=aux)&&(status==1)) {
 2cc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <indexRead>
 2d0:	c8 17       	cp	r28, r24
 2d2:	29 f0       	breq	.+10     	; 0x2de <DecodeHeader+0x1d6>
 2d4:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <status>
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	09 f4       	brne	.+2      	; 0x2de <DecodeHeader+0x1d6>
 2dc:	19 cf       	rjmp	.-462    	; 0x110 <DecodeHeader+0x8>
			break;
		}
		header++;
		indexRead++;
	}
}
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <CksVerif>:

void CksVerif(){
	static uint8_t p=1;
	while((indexRead!=indexWrite)&&(p<nBytes)){       //proxBytes.value
 2e2:	1e c0       	rjmp	.+60     	; 0x320 <CksVerif+0x3e>
		if(p==1)
 2e4:	21 30       	cpi	r18, 0x01	; 1
 2e6:	21 f4       	brne	.+8      	; 0x2f0 <CksVerif+0xe>
		cmdPos_inBuff=indexRead;
 2e8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <indexRead>
 2ec:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		PORTB|= (1<<PORTB7);
 2f0:	85 b1       	in	r24, 0x05	; 5
 2f2:	80 68       	ori	r24, 0x80	; 128
 2f4:	85 b9       	out	0x05, r24	; 5
		cks^=buffer[indexRead];
 2f6:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indexRead>
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	e7 5f       	subi	r30, 0xF7	; 247
 2fe:	fe 4f       	sbci	r31, 0xFE	; 254
 300:	90 81       	ld	r25, Z
 302:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <cks>
 306:	89 27       	eor	r24, r25
 308:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <cks>
		indexRead++;
 30c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <indexRead>
 310:	8f 5f       	subi	r24, 0xFF	; 255
 312:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <indexRead>
		p++;
 316:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 31a:	8f 5f       	subi	r24, 0xFF	; 255
 31c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}

void CksVerif(){
	static uint8_t p=1;
	while((indexRead!=indexWrite)&&(p<nBytes)){       //proxBytes.value
 320:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <indexRead>
 324:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <indexWrite>
 328:	98 17       	cp	r25, r24
 32a:	61 f0       	breq	.+24     	; 0x344 <CksVerif+0x62>
 32c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 330:	42 2f       	mov	r20, r18
 332:	50 e0       	ldi	r21, 0x00	; 0
 334:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <nBytes>
 338:	08 2e       	mov	r0, r24
 33a:	00 0c       	add	r0, r0
 33c:	99 0b       	sbc	r25, r25
 33e:	48 17       	cp	r20, r24
 340:	59 07       	cpc	r21, r25
 342:	84 f2       	brlt	.-96     	; 0x2e4 <CksVerif+0x2>
		PORTB|= (1<<PORTB7);
		cks^=buffer[indexRead];
		indexRead++;
		p++;
	}
	if( (p==proxBytes.value)&&(indexRead!=indexWrite) ){
 344:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <proxBytes>
 34e:	30 91 0a 02 	lds	r19, 0x020A	; 0x80020a <proxBytes+0x1>
 352:	82 17       	cp	r24, r18
 354:	93 07       	cpc	r25, r19
 356:	01 f5       	brne	.+64     	; 0x398 <CksVerif+0xb6>
 358:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <indexRead>
 35c:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <indexWrite>
 360:	98 17       	cp	r25, r24
 362:	d1 f0       	breq	.+52     	; 0x398 <CksVerif+0xb6>
		p=1;
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		if(cks==buffer[indexRead]){
 36a:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <indexRead>
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	e7 5f       	subi	r30, 0xF7	; 247
 372:	fe 4f       	sbci	r31, 0xFE	; 254
 374:	90 81       	ld	r25, Z
 376:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <cks>
 37a:	98 13       	cpse	r25, r24
 37c:	04 c0       	rjmp	.+8      	; 0x386 <CksVerif+0xa4>
			status=3;
 37e:	83 e0       	ldi	r24, 0x03	; 3
 380:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <status>
 384:	07 c0       	rjmp	.+14     	; 0x394 <CksVerif+0xb2>
		}
		else{
			status=1;
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <status>
			indexRead=indexWrite;
 38c:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <indexWrite>
 390:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <indexRead>
		}
		header=0;
 394:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <header>
 398:	08 95       	ret

0000039a <CMD>:
	}
}


void CMD(){                                                                   // Lectura de codigos
	switch(buffer[cmdPos_inBuff]){
 39a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	e7 5f       	subi	r30, 0xF7	; 247
 3a2:	fe 4f       	sbci	r31, 0xFE	; 254
 3a4:	80 81       	ld	r24, Z
 3a6:	8b 32       	cpi	r24, 0x2B	; 43
 3a8:	19 f0       	breq	.+6      	; 0x3b0 <CMD+0x16>
 3aa:	8d 32       	cpi	r24, 0x2D	; 45
 3ac:	89 f1       	breq	.+98     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3ae:	08 95       	ret
		case '+':
		status=1;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <status>
		TimeInterval=buffer[cmdPos_inBuff+1];                          //incremento 
 3b6:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	e6 5f       	subi	r30, 0xF6	; 246
 3be:	fe 4f       	sbci	r31, 0xFE	; 254
 3c0:	80 81       	ld	r24, Z
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <TimeInterval+0x1>
 3c8:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <TimeInterval>
		TimeInterval|=(uint16_t)buffer[cmdPos_inBuff+2]<<8;
 3cc:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	e5 5f       	subi	r30, 0xF5	; 245
 3d4:	fe 4f       	sbci	r31, 0xFE	; 254
 3d6:	80 81       	ld	r24, Z
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	98 2f       	mov	r25, r24
 3dc:	88 27       	eor	r24, r24
 3de:	20 91 0b 02 	lds	r18, 0x020B	; 0x80020b <TimeInterval>
 3e2:	30 91 0c 02 	lds	r19, 0x020C	; 0x80020c <TimeInterval+0x1>
 3e6:	82 2b       	or	r24, r18
 3e8:	93 2b       	or	r25, r19
 3ea:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <TimeInterval+0x1>
 3ee:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <TimeInterval>
		timeOut10ms = timeOut10ms + TimeInterval;     
 3f2:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <timeOut10ms>
 3f6:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <timeOut10ms+0x1>
 3fa:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <TimeInterval>
 3fe:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <TimeInterval+0x1>
 402:	82 0f       	add	r24, r18
 404:	93 1f       	adc	r25, r19
 406:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <timeOut10ms+0x1>
 40a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <timeOut10ms>
	      
		break;
 40e:	08 95       	ret
		case '-':
		status=1;
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <status>
		TimeInterval=buffer[cmdPos_inBuff+1];                              // Decremento  tiempo
 416:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	e6 5f       	subi	r30, 0xF6	; 246
 41e:	fe 4f       	sbci	r31, 0xFE	; 254
 420:	80 81       	ld	r24, Z
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <TimeInterval+0x1>
 428:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <TimeInterval>
		TimeInterval|=(uint16_t)buffer[cmdPos_inBuff+2]<<8;
 42c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__data_end>
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	e5 5f       	subi	r30, 0xF5	; 245
 434:	fe 4f       	sbci	r31, 0xFE	; 254
 436:	80 81       	ld	r24, Z
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	98 2f       	mov	r25, r24
 43c:	88 27       	eor	r24, r24
 43e:	20 91 0b 02 	lds	r18, 0x020B	; 0x80020b <TimeInterval>
 442:	30 91 0c 02 	lds	r19, 0x020C	; 0x80020c <TimeInterval+0x1>
 446:	82 2b       	or	r24, r18
 448:	93 2b       	or	r25, r19
 44a:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <TimeInterval+0x1>
 44e:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <TimeInterval>
		timeOut10ms = timeOut10ms - TimeInterval;
 452:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timeOut10ms>
 456:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timeOut10ms+0x1>
 45a:	20 91 0b 02 	lds	r18, 0x020B	; 0x80020b <TimeInterval>
 45e:	30 91 0c 02 	lds	r19, 0x020C	; 0x80020c <TimeInterval+0x1>
 462:	82 1b       	sub	r24, r18
 464:	93 0b       	sbc	r25, r19
 466:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <timeOut10ms+0x1>
 46a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <timeOut10ms>
 46e:	08 95       	ret

00000470 <main>:



int main (void) {
	                                     // 1 segundo apagado y 1 segundo prendido 
	InitUSART(MYUBRR);   
 470:	87 e6       	ldi	r24, 0x67	; 103
 472:	0e 94 5a 00 	call	0xb4	; 0xb4 <InitUSART>
	sei();
 476:	78 94       	sei
    initTimers10ms ();
 478:	0e 94 73 00 	call	0xe6	; 0xe6 <initTimers10ms>
    ConfPort (DDRB,PORTB,DDB5,1,PORTB5,1);
 47c:	85 b1       	in	r24, 0x05	; 5
 47e:	84 b1       	in	r24, 0x04	; 4
	ConfPort (DDRB,PORTB,DDB7,1,PORTB7,0);
 480:	85 b1       	in	r24, 0x05	; 5
 482:	84 b1       	in	r24, 0x04	; 4
      timeOut10ms=100;
 484:	84 e6       	ldi	r24, 0x64	; 100
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <timeOut10ms+0x1>
 48c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <timeOut10ms>
	 indexWrite=0;
 490:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <indexWrite>
	 indexRead=0;
 494:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <indexRead>
	 header=0;
 498:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <header>
	 status=1;
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <status>
	 timeOutRX=10;
 4a2:	8a e0       	ldi	r24, 0x0A	; 10
 4a4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timeOutRX>
	 sendData=0;
 4a8:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <sendData>
	
	
	while(1){
		
      if(indexRead!=indexWrite){
 4ac:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <indexRead>
 4b0:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <indexWrite>
 4b4:	98 17       	cp	r25, r24
 4b6:	d1 f3       	breq	.-12     	; 0x4ac <main+0x3c>
	      switch(status) {
 4b8:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <status>
 4bc:	82 30       	cpi	r24, 0x02	; 2
 4be:	39 f0       	breq	.+14     	; 0x4ce <main+0x5e>
 4c0:	83 30       	cpi	r24, 0x03	; 3
 4c2:	41 f0       	breq	.+16     	; 0x4d4 <main+0x64>
 4c4:	81 30       	cpi	r24, 0x01	; 1
 4c6:	91 f7       	brne	.-28     	; 0x4ac <main+0x3c>
		    case 1:
		         DecodeHeader();
 4c8:	0e 94 84 00 	call	0x108	; 0x108 <DecodeHeader>
		      
			  break;
 4cc:	ef cf       	rjmp	.-34     	; 0x4ac <main+0x3c>
		    
			case 2:
			
		        CksVerif();
 4ce:	0e 94 71 01 	call	0x2e2	; 0x2e2 <CksVerif>
		      break;
 4d2:	ec cf       	rjmp	.-40     	; 0x4ac <main+0x3c>
		    
			case 3:
			     
		         indexRead++;
 4d4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <indexRead>
 4d8:	8f 5f       	subi	r24, 0xFF	; 255
 4da:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <indexRead>
		         CMD();
 4de:	0e 94 cd 01 	call	0x39a	; 0x39a <CMD>
		         status=1;
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <status>
		     break;
 4e8:	e1 cf       	rjmp	.-62     	; 0x4ac <main+0x3c>

000004ea <__vector_18>:

	                            }
             }
}

ISR(USART_RX_vect){
 4ea:	1f 92       	push	r1
 4ec:	0f 92       	push	r0
 4ee:	0f b6       	in	r0, 0x3f	; 63
 4f0:	0f 92       	push	r0
 4f2:	11 24       	eor	r1, r1
 4f4:	8f 93       	push	r24
 4f6:	ef 93       	push	r30
 4f8:	ff 93       	push	r31
	   buffer[indexWrite] = UDR0;
 4fa:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <indexWrite>
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 504:	e7 5f       	subi	r30, 0xF7	; 247
 506:	fe 4f       	sbci	r31, 0xFE	; 254
 508:	80 83       	st	Z, r24
        indexWrite++;
 50a:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <indexWrite>
 50e:	8f 5f       	subi	r24, 0xFF	; 255
 510:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <indexWrite>
		}
 514:	ff 91       	pop	r31
 516:	ef 91       	pop	r30
 518:	8f 91       	pop	r24
 51a:	0f 90       	pop	r0
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	0f 90       	pop	r0
 520:	1f 90       	pop	r1
 522:	18 95       	reti

00000524 <__vector_11>:
	

ISR (TIMER1_COMPA_vect) {
 524:	1f 92       	push	r1
 526:	0f 92       	push	r0
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	0f 92       	push	r0
 52c:	11 24       	eor	r1, r1
 52e:	8f 93       	push	r24
 530:	9f 93       	push	r25
	   timeOut10ms--;
 532:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timeOut10ms>
 536:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timeOut10ms+0x1>
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <timeOut10ms+0x1>
 540:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <timeOut10ms>
	if (timeOut10ms == 0) {
 544:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <timeOut10ms>
 548:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <timeOut10ms+0x1>
 54c:	89 2b       	or	r24, r25
 54e:	79 f4       	brne	.+30     	; 0x56e <__vector_11+0x4a>
		timeOut10ms=100;
 550:	84 e6       	ldi	r24, 0x64	; 100
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <timeOut10ms+0x1>
 558:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <timeOut10ms>
		if (PORTB & ( 1 << PORTB5)){ // desplazo al numero 1 cinco veces para que aparezca en la posicion 5
 55c:	2d 9b       	sbis	0x05, 5	; 5
 55e:	04 c0       	rjmp	.+8      	; 0x568 <__vector_11+0x44>
		    PORTB &= ~ ( 1 << PORTB5); // ~ (1 << PORTB5) = 11011111 hago cero el bit 5 de PORTB5
 560:	85 b1       	in	r24, 0x05	; 5
 562:	8f 7d       	andi	r24, 0xDF	; 223
 564:	85 b9       	out	0x05, r24	; 5
 566:	03 c0       	rjmp	.+6      	; 0x56e <__vector_11+0x4a>
	      }
		else {
		   PORTB |= ( 1 << PORTB5);
 568:	85 b1       	in	r24, 0x05	; 5
 56a:	80 62       	ori	r24, 0x20	; 32
 56c:	85 b9       	out	0x05, r24	; 5
		  }

		  
	}
	
 56e:	9f 91       	pop	r25
 570:	8f 91       	pop	r24
 572:	0f 90       	pop	r0
 574:	0f be       	out	0x3f, r0	; 63
 576:	0f 90       	pop	r0
 578:	1f 90       	pop	r1
 57a:	18 95       	reti

0000057c <__tablejump2__>:
 57c:	ee 0f       	add	r30, r30
 57e:	ff 1f       	adc	r31, r31
 580:	05 90       	lpm	r0, Z+
 582:	f4 91       	lpm	r31, Z
 584:	e0 2d       	mov	r30, r0
 586:	09 94       	ijmp

00000588 <_exit>:
 588:	f8 94       	cli

0000058a <__stop_program>:
 58a:	ff cf       	rjmp	.-2      	; 0x58a <__stop_program>
